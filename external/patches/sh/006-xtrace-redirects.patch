diff --git external/sh/eval.c external/sh/eval.c
index c60716111..4785edb09 100644
--- external/sh/eval.c
+++ external/sh/eval.c
@@ -459,6 +459,7 @@ evalredir(union node *n, int flags)
 	volatile int in_redirect = 1;
 
 	oexitstatus = exitstatus;
+	xtracestr("%s", "{");
 	expredir(n->nredir.redirect);
 	savehandler = handler;
 	if (setjmp(jmploc.loc)) {
@@ -466,6 +467,7 @@ evalredir(union node *n, int flags)
 
 		handler = savehandler;
 		e = exception;
+		xtracestr("%s", "}!");
 		popredir();
 		if (e == EXERROR && in_redirect) {
 			FORCEINTON;
@@ -483,6 +485,7 @@ evalredir(union node *n, int flags)
 	INTOFF;
 	handler = savehandler;
 	popredir();
+	xtracestr("%s", "}");
 	INTON;
 }
 
@@ -754,8 +757,121 @@ isdeclarationcmd(struct narg *arg)
 		(have_command || !isfunc("local"))));
 }
 
+void
+xtracestr(const char *fmt, ...)
+{
+	if (xflag == 0)
+		return;
+
+	const char *ps4;
+	va_list ap;
+
+	ps4 = expandstr(ps4val());
+	out2str(ps4 != NULL ? ps4 : ps4val());
+	va_start(ap, fmt);
+	doformat(out2, fmt, ap);
+	va_end(ap);
+	out2c('\n');
+	flushout(&errout);
+}
+
+void
+xtracestr_start(const char *fmt, ...)
+{
+	if (xflag == 0)
+		return;
+
+	va_list ap;
+	const char *ps4val = ps4val();
+	const char *ps4 = expandstr(ps4val);
+
+	out2str(ps4 != NULL ? ps4 : ps4val);
+	va_start(ap, fmt);
+	doformat(out2, fmt, ap);
+	va_end(ap);
+}
+
+void
+xtracestr_n(const char *fmt, ...)
+{
+	if (xflag == 0)
+		return;
+
+	va_list ap;
+
+	va_start(ap, fmt);
+	doformat(out2, fmt, ap);
+	va_end(ap);
+}
+
+void
+xtracestr_flush(const char *fmt, ...)
+{
+	if (xflag == 0)
+		return;
+
+	va_list ap;
+
+	va_start(ap, fmt);
+	doformat(out2, fmt, ap);
+	va_end(ap);
+	out2c('\n');
+	flushout(&errout);
+}
+
+void
+xtraceredir(union node *cmd)
+{
+	const char *fname;
+	union node *redir;
+	int fd;
+
+	redir = cmd->ncmd.redirect;
+	fd = redir->nfile.fd;
+
+	switch (redir->nfile.type) {
+	case NFROM:
+		fname = redir->nfile.expfname;
+		xtracestr_n(" %d< %s", fd, fname);
+		break;
+	case NFROMTO:
+		fname = redir->nfile.expfname;
+		xtracestr_n(" %d<> %s", fd, fname);
+		break;
+	case NTO:
+		if (Cflag) {
+			fname = redir->nfile.expfname;
+			xtracestr_n(" %d>| %s", fd, fname);
+			break;
+		}
+		/* FALLTHROUGH */
+	case NCLOBBER:
+		fname = redir->nfile.expfname;
+		xtracestr_n(" %d> %s", fd, fname);
+		break;
+	case NAPPEND:
+		fname = redir->nfile.expfname;
+		xtracestr_n(" %d>> %s", fd, fname);
+		break;
+	case NTOFD:
+	case NFROMFD:
+		if (redir->ndup.dupfd >= 0) {	/* if not ">&-" */
+			xtracestr_n(" %d>&%d", fd, redir->ndup.dupfd);
+		} else {
+			xtracestr_n(" %d>&-", fd);
+		}
+		return;
+	case NHERE:
+	case NXHERE:
+		xtracestr_n(" << XXX");
+		break;
+	default:
+		abort();
+	}
+}
+
 static void
-xtracecommand(struct arglist *varlist, int argc, char **argv)
+xtracecommand(union node *cmd, struct arglist *varlist, int argc, char **argv)
 {
 	char sep = 0;
 	const char *text, *p, *ps4;
@@ -783,6 +899,9 @@ xtracecommand(struct arglist *varlist, int argc, char **argv)
 		out2qstr(text);
 		sep = ' ';
 	}
+	if (cmd->ncmd.redirect) {
+		xtraceredir(cmd);
+	}
 	out2c('\n');
 	flushout(&errout);
 }
@@ -877,7 +996,7 @@ evalcommand(union node *cmd, int flags, struct backcmd *backcmd)
 
 	/* Print the command if xflag is set. */
 	if (xflag)
-		xtracecommand(&varlist, argc, argv);
+		xtracecommand(cmd, &varlist, argc, argv);
 
 	/* Now locate the command. */
 	if (argc == 0) {
diff --git external/sh/eval.h external/sh/eval.h
--- external/sh/eval.h
+++ external/sh/eval.h
@@ -68,3 +68,8 @@ extern int skipcount;
 #define SKIPBREAK	1
 #define SKIPCONT	2
 #define SKIPRETURN	3
+
+void xtracestr(const char * __restrict, ...) __printflike(1, 2);
+void xtracestr_start(const char * __restrict, ...) __printflike(1, 2);
+void xtracestr_n(const char * __restrict, ...) __printflike(1, 2);
+void xtracestr_flush(const char * __restrict, ...) __printflike(1, 2);
diff --git external/sh/redir.c external/sh/redir.c
--- external/sh/redir.c
+++ external/sh/redir.c
@@ -53,6 +53,7 @@
  * Code for dealing with input/output redirection.
  */
 
+#include "eval.h"
 #include "shell.h"
 #include "nodes.h"
 #include "jobs.h"
@@ -115,6 +116,7 @@ redirect(union node *redir, int flags)
 	int i;
 	int fd;
 	char memory[10];	/* file descriptors to write to memory */
+	int redirected = 0;
 
 	INTOFF;
 	for (i = 10 ; --i >= 0 ; )
@@ -123,6 +125,7 @@ redirect(union node *redir, int flags)
 	if (flags & REDIR_PUSH) {
 		empty_redirs++;
 		if (redir != NULL) {
+			xtracestr_start("%s", "REDIR");
 			sv = ckmalloc(sizeof (struct redirtab));
 			for (i = 0 ; i < 10 ; i++)
 				sv->renamed[i] = EMPTY;
@@ -158,9 +161,12 @@ redirect(union node *redir, int flags)
 			INTON;
 		}
 		openredirect(n, memory);
+		redirected = 1;
 		INTON;
 		INTOFF;
 	}
+	if (redirected)
+		xtracestr_flush(" {");
 	if (memory[1])
 		out1 = &memout;
 	if (memory[2])
@@ -182,17 +188,20 @@ openredirect(union node *redir, char memory[10])
 	switch (redir->nfile.type) {
 	case NFROM:
 		fname = redir->nfile.expfname;
+		xtracestr_n(" %d< %s", fd, fname);
 		if ((f = open(fname, O_RDONLY)) < 0)
 			error("cannot open %s: %s", fname, strerror(errno));
 		break;
 	case NFROMTO:
 		fname = redir->nfile.expfname;
+		xtracestr_n(" %d<> %s", fd, fname);
 		if ((f = open(fname, O_RDWR|O_CREAT, 0666)) < 0)
 			error("cannot create %s: %s", fname, strerror(errno));
 		break;
 	case NTO:
 		if (Cflag) {
 			fname = redir->nfile.expfname;
+			xtracestr_n(" %d>| %s", fd, fname);
 			if (stat(fname, &sb) == -1) {
 				if ((f = open(fname, O_WRONLY|O_CREAT|O_EXCL, 0666)) < 0)
 					error("cannot create %s: %s", fname, strerror(errno));
@@ -212,17 +221,20 @@ openredirect(union node *redir, char memory[10])
 		/* FALLTHROUGH */
 	case NCLOBBER:
 		fname = redir->nfile.expfname;
+		xtracestr_n(" %d> %s", fd, fname);
 		if ((f = open(fname, O_WRONLY|O_CREAT|O_TRUNC, 0666)) < 0)
 			error("cannot create %s: %s", fname, strerror(errno));
 		break;
 	case NAPPEND:
 		fname = redir->nfile.expfname;
+		xtracestr_n(" %d>> %s", fd, fname);
 		if ((f = open(fname, O_WRONLY|O_CREAT|O_APPEND, 0666)) < 0)
 			error("cannot create %s: %s", fname, strerror(errno));
 		break;
 	case NTOFD:
 	case NFROMFD:
 		if (redir->ndup.dupfd >= 0) {	/* if not ">&-" */
+			xtracestr_n(" %d>&%d", fd, redir->ndup.dupfd);
 			if (memory[redir->ndup.dupfd])
 				memory[fd] = 1;
 			else {
@@ -231,11 +243,13 @@ openredirect(union node *redir, char memory[10])
 							strerror(errno));
 			}
 		} else {
+			xtracestr_n(" %d>&-", fd);
 			close(fd);
 		}
 		return;
 	case NHERE:
 	case NXHERE:
+		xtracestr_n(" <<");
 		f = openhere(redir);
 		break;
 	default:
@@ -320,6 +334,7 @@ popredir(void)
 		INTON;
 		return;
 	}
+	xtracestr("%s", "} REDIR");
 	for (i = 0 ; i < 10 ; i++) {
 		if (rp->renamed[i] != EMPTY) {
 			if (rp->renamed[i] >= 0) {
